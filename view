@csrf_exempt
@require_POST
def generate_athena_sql(request):
    try:
        data = json.loads(request.body)
        dataset_name = data.get('dataset_name')
        team_names = data.get('team_names', [])
        attributes = data.get('attributes', {})
        partition_keys = data.get('partition_keys', [])
        if not dataset_name or not team_names or not isinstance(attributes, dict):
            return JsonResponse({'error': 'Missing dataset_name, team_names, or attributes'}, status=400)

        athena = boto3.client('athena',
            aws_access_key_id=os.getenv('AWS_ACCESS_KEY_ID'),
            aws_secret_access_key=os.getenv('AWS_SECRET_ACCESS_KEY'),
            region_name=os.getenv('AWS_REGION')
        )
        sql_statements = []
        for team in team_names:
            # Fetch metadata from Athena
            db = team
            table = 'metadata'
            try:
                desc = athena.get_table_metadata(DatabaseName=db, TableName=table)
                columns = desc['TableMetadata']['Columns']
                meta_cols = {col['Name']: col['Type'] for col in columns}
            except Exception as e:
                meta_cols = {}
            # Merge with attributes (attributes override metadata)
            merged = dict(meta_cols)
            for k, v in attributes.items():
                # Athena type conversion
                if v == 'string':
                    merged[k] = 'string'
                elif v == 'float':
                    merged[k] = 'double'
            # Generate columns SQL
            cols_sql = ',\n  '.join([f'`{col}` {typ}' for col, typ in merged.items()])
            # Partition keys
            if not partition_keys:
                partition_keys = ['dt']
            partition_sql = ',\n  '.join([f'`{pk}` string' for pk in partition_keys])
            table_name = f'{dataset_name}_{team}'
            # SQL template (user can edit this block to add more lines)
            sql = f'''-- Athena CREATE TABLE for team: {team}
CREATE EXTERNAL TABLE IF NOT EXISTS `{table_name}` (
  {cols_sql}
)
PARTITIONED BY (
  {partition_sql}
)
ROW FORMAT SERDE 'org.openx.data.jsonserde.JsonSerDe'
WITH SERDEPROPERTIES (
  'serialization.format' = '1'
)
LOCATION 's3://your-athena-data/{table_name}/';
'''
            sql_statements.append(sql)
        return JsonResponse({'sql': '\n\n'.join(sql_statements)})
    except Exception as e:
        return JsonResponse({'error': str(e)}, status=500) 

