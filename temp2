<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>DynamoDB Dataset Editor</title>
    <style>
        body { font-family: Arial, sans-serif; background: #f7f7f7; margin: 0; }
        .container { max-width: 800px; margin: 40px auto; background: #fff; border-radius: 8px; box-shadow: 0 2px 8px #0001; padding: 32px; }
        .row { display: flex; align-items: center; margin-bottom: 18px; }
        .label { width: 140px; font-weight: bold; }
        .input, select, textarea { flex: 1; padding: 8px; border: 1px solid #ccc; border-radius: 4px; }
        .input[readonly] { background: #f0f0f0; }
        .btn { padding: 8px 16px; border: none; border-radius: 4px; cursor: pointer; font-weight: bold; }
        .btn-primary { background: #1976d2; color: #fff; }
        .btn-adv { background: #eee; color: #1976d2; border: 1px solid #1976d2; margin-left: auto; }
        .btn-adv.active { background: #1976d2; color: #fff; }
        .btn-danger { background: #e53935; color: #fff; margin-left: 8px; }
        .btn-add { background: #43a047; color: #fff; margin-left: 8px; }
        .multi-select { min-height: 36px; background: #f9f9f9; border: 1px solid #bdbdbd; border-radius: 6px; font-size: 1em; transition: border 0.2s; }
        .multi-select:focus { border: 1.5px solid #1976d2; background: #f0f7ff; }
        .field-row { display: flex; align-items: center; margin-bottom: 8px; }
        .field-row input { margin-right: 8px; }
        .preview { background: #f4f4f4; border-radius: 4px; padding: 16px; font-family: monospace; margin-top: 24px; }
        .right { float: right; }
        .hidden { display: none; }
        .adv-btns { margin-top: 10px; }
        .datatype-dropdown { margin-left: 8px; }
        .toggle-btn { background: none; border: none; font-size: 1.2em; cursor: pointer; margin-right: 4px; }
        .subfields { margin-left: 32px; border-left: 2px solid #eee; padding-left: 12px; }
        .teamnames-summary { color: #555; font-size: 0.95em; margin-left: 8px; }
        .teamnames-list { margin-left: 32px; }
    </style>
</head>
<body>
<div class="container">
    <div class="row" style="justify-content: space-between;">
        <div style="font-size: 1.5em; font-weight: bold;">DynamoDB Dataset Editor</div>
        <button id="advModeBtn" class="btn btn-adv">Advanced Mode</button>
    </div>

    <form id="datasetForm" method="post" enctype="multipart/form-data">
        {% csrf_token %}
        <div class="row">
            <div class="label">Dataset Name:</div>
            <input class="input" type="text" id="datasetName" name="datasetName" required>
        </div>

        <div class="row">
            <div class="label">Partition Keys:</div>
            <select id="partitionKeys" class="input multi-select" multiple size="3" style="min-width:180px;">
                <option value="kpigroup">kpigroup</option>
                <option value="sessionid">sessionid</option>
                <option value="dt">dt</option>
            </select>
            <span style="margin-left:8px; color:#888; font-size:0.95em;">(Hold Ctrl/Cmd or Shift to select multiple)</span>
        </div>

        <!-- Custom Multi-select Team Dropdown -->
        <div class="row" id="customTeamSelectRow" style="align-items: flex-start;">
            <div class="label" style="padding-top: 8px;">Team Names:</div>
            <div id="teamSelectContainer" style="flex: 1; position: relative;">
                <div id="selectedTeamsDisplay" class="input" style="cursor: pointer; min-height: 38px; display: flex; flex-wrap: wrap; align-items: center; padding: 0 8px; gap: 4px;">
                    <span style="color: #888;" id="teamPlaceholder">Select teams...</span>
                </div>
                <div id="teamDropdown" style="position: absolute; top: 100%; left: 0; right: 0; z-index: 10; background: #fff; border: 1px solid #ccc; border-radius: 4px; max-height: 180px; overflow-y: auto; box-shadow: 0 4px 8px rgba(0,0,0,0.1); display: none;">
                    <input type="text" id="teamSearchInput" class="input" placeholder="Search teams..." style="margin: 8px; width: calc(100% - 16px);">
                    <ul id="teamOptionsList" style="list-style: none; padding: 0 8px; margin: 0;"></ul>
                </div>
            </div>
        </div>

        <div class="row adv-btns hidden" id="advBtns">
            <button type="button" class="btn btn-add" id="addAttrBtn">Add Attribute</button>
        </div>
        <div id="addAttrForm" class="row hidden"></div>

        <!-- JSON Textarea Input -->
        <div class="row" id="jsonInputRow">
            <div class="label">Paste JSON Fields:
                <span id="jsonInfoIcon" style="cursor:pointer; margin-left:6px; color:#1976d2; font-size:1.1em;" title='Format: {"column_name": "string|float"}'>ℹ️</span>
            </div>
            <textarea id="jsonFieldsInput" class="input" rows="5" placeholder='{"snr": "float", "cqi": "string"}' style="flex:2;"></textarea>
        </div>
        <div class="row" id="jsonErrorRow" style="display:none; color:#e53935; font-weight:bold; margin-bottom:0;"></div>

        <div id="fieldsList"></div>
        <div id="customAttrsList"></div>

        <div class="preview">
            <div style="font-weight: bold; margin-bottom: 8px;">JSON Preview</div>
            <textarea id="jsonPreview" class="input" rows="20" style="font-family: monospace; resize: vertical;"></textarea>
        </div>

        <div class="row" style="justify-content: flex-end; margin-top: 24px;">
            <button type="submit" class="btn btn-primary">Submit to DDB</button>
        </div>

        <!-- Athena SQL Output -->
        <div class="row" id="athenaSqlRow" style="display:none; flex-direction:column; margin-top:32px;">
            <div style="font-weight:bold; margin-bottom:8px;">Athena CREATE TABLE SQL</div>
            <textarea id="athenaSqlOutput" class="input" rows="15" style="font-family:monospace;"></textarea>
            <button type="button" class="btn btn-add" id="copyAthenaSqlBtn" style="width:120px; margin-top:8px;">Copy SQL</button>
        </div>
        <div class="row" id="athenaSqlErrorRow" style="display:none; color:#e53935; font-weight:bold; margin-bottom:0;"></div>
        <div class="row" style="justify-content: flex-end; margin-top: 12px;">
            <button type="button" class="btn btn-primary" id="createAthenaBtn">Create Athena DB</button>
        </div>
    </form>
</div>

<script>
let advMode = false;
let fields = {}; // { fieldName: { type: 'string', value: '', subfields: {} } }
let customAttrs = {}; // { attrName: { type, value, subfields } }
let jsonFieldsOnly = {}; // fields loaded from JSON textarea, NOT merged into UI
let jsonFieldsValid = true;
let partitionKeys = [];
let teamNames = []; // Array to hold selected team names
let jsonData = {};

// List of all available teams
const ALL_TEAMS = ['team1', 'team2','team3','team4','team5','team6']; // Placeholder list

// Wrap the rest of the script in DOMContentLoaded
document.addEventListener('DOMContentLoaded', (event) => {

const advModeBtn = document.getElementById('advModeBtn');
const advBtns = document.getElementById('advBtns');
const addAttrBtn = document.getElementById('addAttrBtn');
const addAttrForm = document.getElementById('addAttrForm');
const fieldsList = document.getElementById('fieldsList');
const customAttrsList = document.getElementById('customAttrsList');
const partitionKeysSelect = document.getElementById('partitionKeys');
const jsonPreview = document.getElementById('jsonPreview');
const datasetNameInput = document.getElementById('datasetName');
const datasetForm = document.getElementById('datasetForm');
const jsonFieldsInput = document.getElementById('jsonFieldsInput');
const jsonErrorRow = document.getElementById('jsonErrorRow');
const createAthenaBtn = document.getElementById('createAthenaBtn');
const athenaSqlRow = document.getElementById('athenaSqlRow');
const athenaSqlOutput = document.getElementById('athenaSqlOutput');
const copyAthenaSqlBtn = document.getElementById('copyAthenaSqlBtn');
const athenaSqlErrorRow = document.getElementById('athenaSqlErrorRow');

// Custom Team Select Elements
const teamSelectContainer = document.getElementById('teamSelectContainer');
const selectedTeamsDisplay = document.getElementById('selectedTeamsDisplay');
const teamDropdown = document.getElementById('teamDropdown');
const teamSearchInput = document.getElementById('teamSearchInput');
const teamOptionsList = document.getElementById('teamOptionsList');
const teamPlaceholder = document.getElementById('teamPlaceholder');


const DATATYPES = [
    { value: 'string', label: 'String' },
    { value: 'float', label: 'Float' },
    { value: 'number', label: 'Number' },
    { value: 'map', label: 'Map' }
];

// --- Custom Team Select Logic ---

// Function to render the team options in the dropdown
function renderTeamOptions(filter = '') {
    teamOptionsList.innerHTML = ''; // Clear current options
    const lowerFilter = filter.toLowerCase();
    ALL_TEAMS.filter(team => team.toLowerCase().includes(lowerFilter))
             .forEach(team => {
        const li = document.createElement('li');
        li.style.padding = '8px';
        li.style.cursor = 'pointer';
        li.style.borderBottom = '1px solid #eee';
        li.style.display = 'flex';
        li.style.alignItems = 'center';

        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.value = team;
        checkbox.checked = teamNames.includes(team); // Set checked state based on teamNames array
        checkbox.style.marginRight = '8px';

        const label = document.createElement('label');
        label.textContent = team;
        label.style.flexGrow = 1;
        label.style.cursor = 'pointer';

        li.appendChild(checkbox);
        li.appendChild(label);

        // Handle click on the list item (checks/unchecks the box and updates)
        li.onclick = (e) => {
             // Prevent click on li from closing dropdown if clicking checkbox/label
            if (e.target !== checkbox && e.target !== label) {
                 checkbox.checked = !checkbox.checked;
            }
             handleTeamSelection(team, checkbox.checked);
        };

        // Handle click on the checkbox itself
        checkbox.onclick = (e) => {
             e.stopPropagation(); // Prevent li click handler from firing
             handleTeamSelection(team, checkbox.checked);
        };

        teamOptionsList.appendChild(li);
    });
}

// Function to handle team selection/deselection
function handleTeamSelection(team, isChecked) {
    if (isChecked) {
        if (!teamNames.includes(team)) {
            teamNames.push(team);
        }
    } else {
        teamNames = teamNames.filter(t => t !== team);
    }
    updateSelectedTeamsDisplay();
    updateJsonPreview();
     // Keep dropdown open after selection
    teamDropdown.style.display = 'block';
}

// Function to update the display area with selected teams
function updateSelectedTeamsDisplay() {
    selectedTeamsDisplay.innerHTML = ''; // Clear current display
    if (teamNames.length === 0) {
        teamPlaceholder.style.display = '';
        selectedTeamsDisplay.appendChild(teamPlaceholder);
    } else {
         teamPlaceholder.style.display = 'none';
        teamNames.forEach(team => {
            const span = document.createElement('span');
            span.textContent = team;
            span.style.background = '#e0e0e0';
            span.style.borderRadius = '4px';
            span.style.padding = '2px 6px';
            span.style.marginRight = '4px';
            span.style.fontSize = '0.9em';
             selectedTeamsDisplay.appendChild(span);
        });
    }
}

// Toggle dropdown visibility
selectedTeamsDisplay.onclick = () => {
    const isVisible = teamDropdown.style.display === 'block';
    if (!isVisible) {
         renderTeamOptions(teamSearchInput.value); // Render with current search filter
         teamDropdown.style.display = 'block';
         teamSearchInput.focus(); // Focus search input when opening
    } else {
         teamDropdown.style.display = 'none';
    }
};

// Filter options on search input
teamSearchInput.oninput = () => {
    renderTeamOptions(teamSearchInput.value);
};

// Close dropdown when clicking outside
document.addEventListener('click', (e) => {
    if (!teamSelectContainer.contains(e.target)) {
        teamDropdown.style.display = 'none';
    }
});


// --- Existing Functions (restored and integrated) ---

function renderFieldsList() {
    fieldsList.innerHTML = '';
    Object.entries(fields).forEach(([name, info]) => {
        renderFieldRow(fieldsList, name, info, fields, 0, false);
    });
}

function renderCustomAttrsList() {
    customAttrsList.innerHTML = '';
    Object.entries(customAttrs).forEach(([name, info]) => {
        renderFieldRow(customAttrsList, name, info, customAttrs, 0, true);
    });
}

function renderFieldRow(container, name, info, parentObj, depth, isCustom) {
    const row = document.createElement('div');
    row.className = 'field-row';
    // Expand/collapse for map
    let isMap = info.type === 'map';
    let expanded = info._expanded !== false;
    if (isMap) {
        const toggleBtn = document.createElement('button');
        toggleBtn.type = 'button';
        toggleBtn.className = 'toggle-btn';
        toggleBtn.textContent = expanded ? '▼' : '▶';
        toggleBtn.onclick = () => {
            info._expanded = !expanded;
            if (isCustom) renderCustomAttrsList(); else renderFieldsList();
        };
        row.appendChild(toggleBtn);
    }
    // Field name
    const nameInput = document.createElement('input');
    nameInput.type = 'text';
    nameInput.value = name;
    nameInput.className = 'input';
    nameInput.readOnly = !advMode;
    nameInput.onchange = e => {
        if (e.target.value && e.target.value !== name) {
            parentObj[e.target.value] = { ...info };
            delete parentObj[name];
            if (isCustom) renderCustomAttrsList(); else renderFieldsList();
            updateJsonPreview();
        }
    };
    row.appendChild(nameInput);
    // Type
    const typeSelect = document.createElement('select');
    DATATYPES.forEach(dt => {
        const opt = document.createElement('option');
        opt.value = dt.value;
        opt.textContent = dt.label;
        if (info.type === dt.value) opt.selected = true;
        typeSelect.appendChild(opt);
    });
    typeSelect.disabled = !advMode;
    typeSelect.className = 'input datatype-dropdown';
    typeSelect.onchange = e => {
        info.type = e.target.value;
        if (info.type === 'map' && !info.subfields) info.subfields = {};
        if (info.type !== 'map') delete info.subfields;
        if (isCustom) renderCustomAttrsList(); else renderFieldsList();
        updateJsonPreview();
    };
    row.appendChild(typeSelect);
    // Value (optional, for advanced mode)
    if (advMode && info.type !== 'map') {
        const valInput = document.createElement('input');
        valInput.type = 'text';
        valInput.value = info.value || '';
        valInput.placeholder = 'Value (optional)';
        valInput.className = 'input';
        valInput.onchange = e => {
            info.value = e.target.value;
            updateJsonPreview();
        };
        row.appendChild(valInput);
    }
    // Remove button
    if (advMode) {
        const delBtn = document.createElement('button');
        delBtn.type = 'button';
        delBtn.className = 'btn btn-danger';
        delBtn.textContent = '×';
        delBtn.onclick = () => {
            delete parentObj[name];
            if (isCustom) renderCustomAttrsList(); else renderFieldsList();
            updateJsonPreview();
        };
        row.appendChild(delBtn);
    }
    container.appendChild(row);
    // Subfields for map
    if (isMap && expanded) {
        const subDiv = document.createElement('div');
        subDiv.className = 'subfields';
        if (!info.subfields) info.subfields = {};
        Object.entries(info.subfields).forEach(([subName, subInfo]) => {
            renderFieldRow(subDiv, subName, subInfo, info.subfields, depth + 1, isCustom);
        });
        // Add subfield button (adv mode)
        if (advMode) {
            const addSubBtn = document.createElement('button');
            addSubBtn.type = 'button';
            addSubBtn.className = 'btn btn-add';
            addSubBtn.textContent = '+ Add Subfield';
            addSubBtn.onclick = () => showAddSubfieldForm(info.subfields, subDiv, isCustom);
            subDiv.appendChild(addSubBtn);
        }
        container.appendChild(subDiv);
    }
}

function showAddSubfieldForm(subfieldsObj, container, isCustom) {
    // Only one form at a time
    if (container.querySelector('.add-field-form')) return;
    const formDiv = document.createElement('div');
    formDiv.className = 'add-field-form field-row';
    const nameInput = document.createElement('input');
    nameInput.type = 'text';
    nameInput.placeholder = 'Subfield name';
    nameInput.className = 'input';
    const typeSelect = document.createElement('select');
    DATATYPES.forEach(dt => {
        const opt = document.createElement('option');
        opt.value = dt.value;
        opt.textContent = dt.label;
        typeSelect.appendChild(opt);
    });
    typeSelect.className = 'input datatype-dropdown';
    const addBtn = document.createElement('button');
    addBtn.type = 'button';
    addBtn.className = 'btn btn-add';
    addBtn.textContent = 'Add';
    addBtn.onclick = () => {
        const name = nameInput.value.trim();
        const type = typeSelect.value;
        if (name && !(name in subfieldsObj)) {
            subfieldsObj[name] = { type };
            formDiv.remove();
            // Note: renderTeamNames is no longer used for the options list
            if (isCustom) renderCustomAttrsList(); else renderFieldsList();
            updateJsonPreview();
        }
    };
    const cancelBtn = document.createElement('button');
    cancelBtn.type = 'button';
    cancelBtn.className = 'btn';
    cancelBtn.textContent = 'Cancel';
    cancelBtn.onclick = () => formDiv.remove();
    formDiv.appendChild(nameInput);
    formDiv.appendChild(typeSelect);
    formDiv.appendChild(addBtn);
    formDiv.appendChild(cancelBtn);
    container.appendChild(formDiv);
}

// JSON textarea logic with validation
jsonFieldsInput.oninput = function() {
    let error = '';
    try {
        const parsed = JSON.parse(jsonFieldsInput.value || '{}');
        jsonFieldsOnly = {};
        Object.entries(parsed).forEach(([k, v]) => {
            if (typeof v !== 'string' || (v !== 'string' && v !== 'float')) {
                error = `Invalid datatype for '${k}': '${v}'. Only 'string' and 'float' allowed.`;
            } else {
                // Store original type string for backend processing
                jsonFieldsOnly[k] = v;
            }
        });
    } catch (e) {
        error = 'Invalid JSON syntax.';
        jsonFieldsOnly = {};
    }
    if (error) {
        jsonFieldsValid = false;
        jsonErrorRow.textContent = error;
        jsonErrorRow.style.display = '';
    } else {
        jsonFieldsValid = true;
        jsonErrorRow.textContent = '';
        jsonErrorRow.style.display = 'none';
    }
    updateJsonPreview();
};

// Add input listener for the JSON preview textarea
jsonPreview.oninput = function() {
    try {
        // Attempt to parse the edited JSON
        const editedJson = JSON.parse(jsonPreview.value);
        // If valid, update the jsonData object
        jsonData = editedJson;
        // Clear any previous error message
        jsonErrorRow.textContent = '';
        jsonErrorRow.style.display = 'none';
    } catch (e) {
        // If invalid JSON, show an error but *do not* update jsonData
        jsonErrorRow.textContent = 'JSON Preview syntax error: ' + e.message;
        jsonErrorRow.style.display = '';
        // Keep the last valid jsonData
    }
    // Note: We don't call updateJsonPreview() here to avoid overwriting manual edits immediately
    // The jsonData object is updated if valid JSON is entered.
    // UI changes will rebuild jsonData from UI state and update the textarea.
};

function updateJsonPreview() {
    // Only update if valid JSON in the input textarea
    if (!jsonFieldsValid) {
        jsonPreview.value = ''; // Clear preview if input JSON is invalid
        return;
    }

    // --- Existing logic to build jsonData from UI elements ---
    // Recursively build the JSON structure for manual fields
    function buildFieldsM(obj) {
        const result = {};
        Object.entries(obj).forEach(([name, info]) => {
            if (info.type === 'map') {
                result[name] = { map: buildFieldsM(info.subfields || {}) };
            } else {
                 // Store original type string for backend processing
                result[name] = info.type;
            }
        });
        return result;
    }

    // Recursively build the JSON structure for custom attributes
    function buildCustomAttrs(obj) {
        const result = {};
        Object.entries(obj).forEach(([name, info]) => {
            if (info.type === 'map') {
                result[name] = { map: buildFieldsM(info.subfields || {}) }; // Use buildFieldsM for nested structure
            } else {
                 // If value is provided, use it; otherwise, use the type string
                result[name] = info.value !== undefined && info.value !== '' ? info.value : info.type;
            }
        });
        return result;
    }

    // Merge jsonFieldsOnly (JSON textarea) and fields (manual UI), manual fields taking precedence
    const fieldsM = { ...jsonFieldsOnly }; // Start with fields from JSON textarea
    // Add/overwrite with fields from manual UI
    Object.entries(fields).forEach(([name, info]) => {
        if (info.type === 'map') {
             fieldsM[name] = { map: buildFieldsM(info.subfields || {}) };
        } else {
            // Store original type string for backend processing
             fieldsM[name] = info.type;
        }
    });

    const customAttrsObj = buildCustomAttrs(customAttrs);

    // Build the main jsonData object from UI elements
    const uiBuiltJsonData = {
        DatasetName: datasetNameInput.value,
        Fields: { M: fieldsM },
        PartitionKeys: Array.from(partitionKeysSelect.selectedOptions).map(o => o.value),
        TeamNames: teamNames, // Use the teamNames array populated by the custom select
        ...customAttrsObj
    };

    // --- Update the editable textarea ---
    // If the user has made edits to the textarea and it's currently valid JSON,
    // we *could* try to preserve those edits, but given the complex structure,
    // it's simpler and safer to rebuild the JSON from the UI state and display that.
    // The user's textarea edits will be used *only* if they don't interact with the UI
    // elements that trigger a rebuild, or if they copy from the textarea after editing.
    // We set jsonData to the UI-built version here.
    jsonData = uiBuiltJsonData;
    jsonPreview.value = JSON.stringify(jsonData, null, 2);

    // Ensure the JSON preview syntax error is cleared if a valid update occurs from UI
     if (jsonFieldsValid && jsonErrorRow.style.display !== 'none' && !jsonPreview.value) {
          jsonErrorRow.textContent = '';
          jsonErrorRow.style.display = 'none';
     }
}

advModeBtn.onclick = () => {
    advMode = !advMode;
    advModeBtn.classList.toggle('active', advMode);
    advBtns.classList.toggle('hidden', !advMode);
    renderFieldsList();
    renderCustomAttrsList();
};

addAttrBtn.onclick = () => {
    addAttrForm.innerHTML = '';
    const nameInput = document.createElement('input');
    nameInput.type = 'text';
    nameInput.placeholder = 'Attribute name';
    nameInput.className = 'input';
    const typeSelect = document.createElement('select');
    DATATYPES.forEach(dt => {
        const opt = document.createElement('option');
        opt.value = dt.value;
        opt.textContent = dt.label;
        typeSelect.appendChild(opt);
    });
    typeSelect.className = 'input datatype-dropdown';
    const addBtn = document.createElement('button');
    addBtn.type = 'button';
    addBtn.className = 'btn btn-add';
    addBtn.textContent = 'Add';
    addBtn.onclick = () => {
        const name = nameInput.value.trim();
        const type = typeSelect.value;
        if (name && !(name in customAttrs)) {
            customAttrs[name] = { type };
            addAttrForm.innerHTML = '';
            renderCustomAttrsList();
            updateJsonPreview();
        }
    };
    const cancelBtn = document.createElement('button');
    cancelBtn.type = 'button';
    cancelBtn.className = 'btn';
    cancelBtn.textContent = 'Cancel';
    cancelBtn.onclick = () => addAttrForm.innerHTML = '';
    addAttrForm.appendChild(nameInput);
    addAttrForm.appendChild(typeSelect);
    addAttrForm.appendChild(addBtn);
    addAttrForm.appendChild(cancelBtn);
    addAttrForm.classList.remove('hidden');
};

partitionKeysSelect.onchange = function() {
    partitionKeys = Array.from(partitionKeysSelect.selectedOptions).map(o => o.value);
    updateJsonPreview();
};

datasetNameInput.oninput = updateJsonPreview;

// Athena SQL generation logic
createAthenaBtn.onclick = async function() {
    athenaSqlRow.style.display = 'none';
    athenaSqlErrorRow.style.display = 'none';
    if (!jsonFieldsValid) {
        athenaSqlErrorRow.textContent = 'Please fix JSON errors before creating Athena DB.';
        athenaSqlErrorRow.style.display = '';
        return;
    }
    const datasetName = datasetNameInput.value.trim();
    const teamNamesList = teamNames.filter(t => t.trim() !== ''); // Use the teamNames array from custom select
    const partitionKeysList = Array.from(partitionKeysSelect.selectedOptions).map(o => o.value);
    if (!datasetName || teamNamesList.length === 0) {
        athenaSqlErrorRow.textContent = 'Please enter a dataset name and select at least one team.';
        athenaSqlErrorRow.style.display = '';
        return;
    }
    // POST to backend
    try {
        const resp = await fetch('/athena/generate_sql/', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'X-CSRFToken': '{{ csrf_token }}' },
            body: JSON.stringify({
                dataset_name: datasetName,
                team_names: teamNamesList,
                attributes: jsonFieldsOnly, // Send JSON textarea attributes
                partition_keys: partitionKeysList
            })
        });
        if (!resp.ok) throw new Error('Server error');
        const data = await resp.json();
        if (data.error) throw new Error(data.error);
        athenaSqlOutput.value = data.sql || '';
        athenaSqlRow.style.display = '';
    } catch (e) {
        athenaSqlErrorRow.textContent = e.message || 'Failed to generate Athena SQL.';
        athenaSqlErrorRow.style.display = '';
    }
};

copyAthenaSqlBtn.onclick = function() {
    athenaSqlOutput.select();
    document.execCommand('copy');
    copyAthenaSqlBtn.textContent = 'Copied!';
    setTimeout(() => { copyAthenaSqlBtn.textContent = 'Copy SQL'; }, 1200);
};

// Initial render of team options and display
renderTeamOptions(''); // Render all options initially
updateSelectedTeamsDisplay(); // Update display based on initial empty teamNames

// Initial renders for other sections
renderFieldsList();
renderCustomAttrsList();
updateJsonPreview();

datasetForm.onsubmit = function(e) {
    e.preventDefault();
    alert('Submitted JSON:\n' + JSON.stringify(jsonData, null, 2));
    // You can send jsonData to the backend here via AJAX or a POST request.
};

}); // End DOMContentLoaded
</script>
</body>
</html>
